#!/usr/bin/env ruby

require 'rubyhue'
require 'optparse'

HUE_CONFIG_PATH = "#{ENV["HOME"]}/.hueconfig"

class HueCli

  attr_reader :username, :ip
  def initialize
    if File.exists? HUE_CONFIG_PATH
      saved_data = JSON.parse( IO.read( HUE_CONFIG_PATH ) )
      @username = saved_data["username"]
      @ip = saved_data["bridge_ip"]
    end
  end
  
  def config
    options = {}
    OptionParser.new do |opts|
      opts.on("-u", "--user <username>", String, "Username") do |url|
        options[:user] = url
      end
      opts.on("-i", "--ip <bridge ip>", String, "Bridge ip address") do |ip|
        options[:ip] = ip
      end
      opts.on("-f", "--force", "Force write to config file") do |f|
        options[:force] = f
      end
    end.parse!
   
    if !options[:user] && !options[:ip]
      puts "Must specify username and/or bridge IP: --user <username> --ip <IP addr. of bridge>"
      exit 1
    end
  
    if !options[:force] && File.exists?(HUE_CONFIG_PATH)
      overwrite = ""
      while overwrite[0] != "y" \
              && overwrite[0] != "Y" \
              && overwrite[0] != "n" \
              && overwrite[0] != "N" \
              && overwrite[0] != "\n"
        print "Hue config already exists. Overwrite? [Y/n]: "
        overwrite = STDIN.gets
      end
      overwrite.upcase!
      if overwrite[0] == "N"
        exit
      end
    end
  
    config = {
      "username" => options[:user] || @username,
      "bridge_ip" => options[:ip] || @ip
    }
    File.open(HUE_CONFIG_PATH,"w+") { |file| file.write(config.to_json) }
    puts "Configuration settings saved."
  end
  
  def list
    hue = Hue.new @ip, @username 
    bulbs_response = hue.request_bulb_list
    bulbs_response.each do |id,value|
      info = hue.request_bulb_info( id )
      puts "[#{id}] #{info["name"]}"
    end
  end
  
  def register
    hue = Hue.new @ip, @username
    response = hue.register_username
  end

  def discover 
    options = {}
    OptionParser.new do |opts|
      opts.on("-s", "--save", "Save discovered bridge to configuration file") do |s|
        options[:save] = s
      end
    end.parse!

    hue = Hue.new @ip, @username
    bridges = hue.discover_hubs
    bridges.each { |b| puts "#{b["name"]}: #{b["internalipaddress"]}" }

    if options[:save] && bridges.length >= 1
      config = {
        "username" => @username,
        "bridge_ip" => bridges.first["internalipaddress"]
      }
      File.open(HUE_CONFIG_PATH,"w+") { |file| file.write(config.to_json) }
      puts "Discovered bridge IP saved."
    end
  end

end

  
if !ARGV[0]
  STDERR.puts "Must specify a command. (config, list, register, discover)"
  exit 1
end

begin
  cli = HueCli.new
  command = ARGV.shift
  if command == "config"
    cli.config
  elsif !cli.username || !cli.ip
    puts "Please run 'lights config' before using."
  elsif command == "list"
    cli.list
  elsif command == "register"
    cli.register
  elsif command == "discover"
    cli.discover
  else
    puts "Cannot find command #{command}."
  end
rescue HueBridgeConnectException,
        HueUsernameException => e
  puts e.message
rescue Errno::ENETUNREACH, Errno::ENETDOWN
  puts "Please check your internet connection and try again."
end


