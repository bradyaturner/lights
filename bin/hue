#!/usr/bin/env ruby

require 'rubyhue'
require 'optparse'

HUE_CONFIG_PATH = "#{ENV["HOME"]}/.hueconfig"

class HueCli

  def initialize
    @config = {}
    if File.exists? HUE_CONFIG_PATH
      @config = JSON.parse( IO.read( HUE_CONFIG_PATH ) )
    end
  end

  def configured?
    @config["username"] && @config["bridge_ip"]
  end
  
  def config
    options = {}
    OptionParser.new do |opts|
      opts.on("-u", "--user <username>", String, "Username") do |url|
        options[:user] = url
      end
      opts.on("-i", "--ip <bridge ip>", String, "Bridge ip address") do |ip|
        options[:ip] = ip
      end
      opts.on("-f", "--force", "Force write to config file") do |f|
        options[:force] = f
      end
      opts.on("-l", "--list", "List saved configuration settings") do |l|
        options[:list] = l
      end
    end.parse!
 
    if !options[:user] && !options[:ip] && !options[:list]
      puts "Must specify username and/or bridge IP: --user <username> --ip <IP addr. of bridge>"
      exit 1
    end
 
    if options[:list]
      @config.each { |k,v| puts "#{k}: #{v}" }
    else
      if !options[:force] && File.exists?(HUE_CONFIG_PATH)
        overwrite = ""
        while overwrite[0] != "y" \
                && overwrite[0] != "Y" \
                && overwrite[0] != "n" \
                && overwrite[0] != "N" \
                && overwrite[0] != "\n"
          print "Hue config already exists. Overwrite? [Y/n]: "
          overwrite = STDIN.gets
        end
        overwrite.upcase!
        if overwrite[0] == "N"
          exit
        end
      end
  
      @config["username"] = options[:user] || @config["username"]
      @config["bridge_ip"] = options[:ip] || @config["bridge_ip"]
  
      write_config
      puts "Configuration settings saved."
    end
  end
  
  def list
    hue = Hue.new @config["bridge_ip"], @config["username"]
    if !ARGV[0] || ARGV[0] == "lights"
      bulbs_response = hue.request_bulb_list
      bulbs_response.each do |id,value|
        bulb = hue.request_bulb_info( id )
        puts "[#{id}] #{bulb.name}"
      end
    elsif ARGV[0] == "sensors"
      sensors_response = hue.request_sensor_list
      sensors_response.each do |id,value|
        sensor = hue.request_sensor_info( id )
        puts "[#{id}] #{sensor.name}"
      end
    elsif ARGV[0] == "groups"
      groups_response = hue.request_group_list
      groups_response.each do |id,value|
        group = hue.request_group_info( id )
        puts "[#{id}] #{group.name} (#{group.lights.join(',')})"
      end
    end
  end
  
  def register
    hue = Hue.new @config["bridge_ip"], @config["username"]
    response = hue.register_username
  end

  def discover 
    options = {}
    OptionParser.new do |opts|
      opts.on("-s", "--save", "Save discovered bridge to configuration file") do |s|
        options[:save] = s
      end
    end.parse!

    hue = Hue.new @config["bridge_ip"], @config["username"]
    bridges = hue.discover_hubs
    bridges.each_with_index { |b,i| puts "[#{i+1}] #{b.name}: #{b.ip}" }

    if options[:save] && bridges.length >= 1
      if bridges.length > 1
        which_bridge = -1
        while !(which_bridge >=0 && which_bridge <= bridges.length)
          print "Which bridge would you like to save? (0 for none): "
          which_bridge = Integer( gets ) rescue -1 
        end
      else
        which_bridge = 1
      end
      if which_bridge != 0
        @config["bridge_ip"] = bridges[which_bridge.to_i-1].ip
        write_config
        puts "Discovered bridge IP saved: #{bridges[which_bridge-1].ip}"
      end
    elsif bridges.length == 0
      puts "Did not discover any bridges."
    end
  end

  def on
    on_off true
  end

  def off
    on_off false
  end

  def set
    options = {}
    OptionParser.new do |opts|
      opts.on("-o", "--on", "Turn lights on") do |o|
        options[:on] = o
      end
      opts.on("-f", "--off", "Turn lights off") do |f|
        options[:off] = f
      end
      opts.on("-c", "--ct color_temp", OptionParser::DecimalInteger, "Set color temperature") do |c|
        options[:ct] = c
      end
      opts.on("-l", "--lights 1,2,...N", Array, "Which lights to control") do |l|
        options[:lights] = l
      end
    end.parse!

    bad_args = false
    if !options[:on] && !options[:off] && !options[:ct]
      puts "Must specify a state to set."
      bad_args = true
    end
    if !options[:lights]
      puts "Must specify which lights to control."
      bad_args = true
    end
    exit 1 if bad_args    
    
    if options[:on]
      set_on(true,options[:lights])
    elsif options[:off]
      set_on(false,options[:lights])
    elsif options[:ct]
      s = HueBulbState.new
      s.ct = options[:ct]
      set_state(s,options[:lights])
    end 
  end

private
  def set_state(state,lights)
    hue = Hue.new @config["bridge_ip"], @config["username"]
    if lights.first == "all"
      hue.set_group_state 0,state
    else
      lights.each { |l| hue.set_bulb_state(l,state) }
    end 
  end

  def write_config
    File.open(HUE_CONFIG_PATH,"w+") { |file| file.write(@config.to_json) }
  end

  def on_off(is_on)
    options = {}
    OptionParser.new do |opts|
      opts.on("-l", "--lights 1,2,...N", Array, "Which lights to control") do |l|
        options[:lights] = l 
      end
    end.parse!

    if !options[:lights]
      puts "Must specify which lights to control."
      exit 1
    end

    set_on is_on, options[:lights]
  end

  def set_on(is_on, lights)
    on_state = { "on" => is_on }
    state = HueBulbState.new(on_state)

    hue = Hue.new @config["bridge_ip"], @config["username"]
    if lights.first == "all"
      hue.set_group_state 0,state
    else
      lights.each { |l| hue.set_bulb_state(l,state) }
    end
  end
end

  
if !ARGV[0]
  STDERR.puts "Must specify a command. (config, list, register, discover, on, off, set)"
  exit 1
end

begin
  cli = HueCli.new
  command = ARGV.shift
  if command == "config"
    cli.config
  elsif command == "discover"
    cli.discover
  elsif !cli.configured?
    puts "Please run 'hue config' before using."
  elsif command == "list"
    cli.list
  elsif command == "register"
    cli.register
  elsif command == "on"
    cli.on
  elsif command == "off"
    cli.off
  elsif command == "set"
    cli.set
  else
    puts "Cannot find command #{command}."
  end
rescue HueBridgeConnectException,
        HueUsernameException => e
  puts e.message
rescue Errno::ENETUNREACH, Errno::ENETDOWN
  puts "Please check your internet connection and try again."
rescue Interrupt
  puts ""
end


